# 그리디 프로그래밍 알고리즘 baekjoon 1715 카드 정렬하기

import sys 
import heapq
input = sys.stdin.readline

# 카드 묶음의 개수를 입력 
N = int(input())
# 카드 묶음의 수를 입력할 힙을 만들어줌
data = []
# 시간 초과를 피하기 위해 힙을 통해서 data 에 카드 묶음의 수를 입력해줌
for _ in range(N):
    heapq.heappush(data, int(input()))

# 결과값 초기화
result = 0

# 카드 묶음이 하나라면 비교를 할 수 없음으로 기본값 입력
if N == 1 :
    print(result)
# 카드 묶음이 2개 이상인 경우 제일 작은 카드 묶음 2개씩을 결과에 더해주는 것이 최소한의 비교가 가능
else: 
    # 카드 묶음이 1개 인경우 더이상 비교를 못하니 반복문을 설정
    while len(data) > 1:
        # 가장 작은 것을 힙을 통해서 가져옴
        smallest = heapq.heappop(data)
        # 그다음으로 작은 것을 힙을 통해서 가져옴
        second_smallest = heapq.heappop(data)
        # 결과 값에 가장 작은것과 그 다음으로 작은 것을 더해줌
        result += smallest + second_smallest
        # 반복문을 통한 다시 비교를 위해 힙을 통해서 가장 작은것과 그 다음으로 작은 것을 더해준 값을 추가
        heapq.heappush(data, smallest + second_smallest)
    # 결과값 출력 
    print(result)
